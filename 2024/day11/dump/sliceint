package main

import (
	"bytes"
	"fmt"
	"math"
	"os"
	"strconv"
)

const N_BLINKS = 75

func main() {
	stones := readStonesSlice()
	fmt.Printf("Initial Arrangement: %+v\n", stones)
	for i := 1; i <= N_BLINKS; i++ {
	    fmt.Printf("   Blinking #%d ", i)
        stones = blinkSlice(stones)
    }
    fmt.Printf("Final Number of Stones: %d\n", len(stones))

}

func blinkSlice(stones []uint) []uint {
	N := len(stones)
	fmt.Printf("    Blinking with <%d> stones\n", N)
	for i := 0; i < N; i++ {
		s := stones[i]
		if s == 0 {
			stones[i] = 1
		} else if n := digits(s); n%2 == 0 {
			half := n / 2
			left := s / uint(math.Pow(10, float64(half)))
			right := s % uint(math.Pow(10, float64(half)))
			stones[i] = left
			stones = append(stones, right)
		} else {
			stones[i] = stones[i] * 2024
		}
	}
	return stones
}

func readStonesSlice() []uint {
	file := readFile("input.txt")
	fields := bytes.Fields(file)
	stones := make([]uint, len(fields))
	for i, b := range fields {
        n, _ :=  strconv.Atoi(string(b))
		stones[i] = uint(n)
	}
	return stones
}

func readFile(name string) []byte {
	file, err := os.ReadFile(name)
	if err != nil {
		err = fmt.Errorf("open file %s: %s\n", name, err)
		fmt.Printf("ERROR: %s\n", err)
		os.Exit(1)
	}
	return file
}

func assert(expr bool, msg string) {
	if !expr {
		panic(msg)
	}
}

func digits(a uint) uint {
	return uint(math.Floor(math.Log10(float64(a))) + 1)
}

func insert[T any](a []T, index int, value T) []T {
	if len(a) == index {
		return append(a, value)
	}
	a = append(a[:index+1], a[index:]...)
	a[index] = value
	return a
}
